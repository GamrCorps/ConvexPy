Misc Operators:

m
j - memoized recursion

"Array" 2-char Operators:

e! - unique permutations
e# - line comment (not really an operator)
e& - logical and
e* - repeat each item in an array
e< - min of 2 values
e= - count occurrences
e> - max of 2 values
e[ - pad array to the left
e\ - swap 2 array items
e] - pad array to the right
e_ - flatten array
e` - RLE encode
ea - command-line args
ed - debug (show stack contents)
ee - enumerate array
es - timestamp (milliseconds from the epoch)
et - local time
ew - overlapping slices
e| - logical or
e~ - RLE decode


"Math" 2-char Operators:

m followed by numeric literal - subtract/remove (same as "-" but avoids the need for a space after it)
m! - factorial, permutations with duplicates
m* - cartesian product, cartesian power
m< - bit shift, rotate left
m> - bit shift, rotate right
mC - arccos
mF - factorization with exponents
mL - log with base
mO - round with precision
mQ - integer square root
mR - random choice
mS - arcsin
mT - arctan
m[ - floor
m] - ceil
ma - atan2
mc - cos
md - divmod
me - exp
mf - factorization
mh - hypot
ml - ln (natural logarithm)
mo - round
mp - prime
mq - sqrt
mr - random number, shuffle
ms - sin
mt - tan


Regex Operators:

® - start regex literal (ended by ")
þ - convert string to regex type
ø - first match
ð - amount of matches
ô - array of matches
õ - indexes of matches
ò - replace all occurances
ó - replace first occurance
ö - split


Quaternion/Imaginary Number Operators:

¤ - convert string/list to quaternion
n - norm of quaternion


String Compression Operators:

Ö - compress string
Ü - decompress string


Variables:

A=10
B=11
C=12
D=13
E=14
F=15
G=16
H=17
I=18
J=19
K=20
L="" (same as [])
M=""
N="\n" (newline string)
O=""
P=pi (3.141592653589793)
Q=""
R=0
S=" " (space)
T="abcdefghijklmnopqrstuvwxyz" (lowercase letters)
U="ABCDEFGHIJKLMNOPQRSTUVWXYZ" (uppercase letters)
V="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" (uppercase and lowercase letters)
W=-1
X=1
Y=2
Z=3
¢=phi (1.618033988749895)